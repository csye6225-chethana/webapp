name: Run webapp integration tests and then build custom AMI with Packer
 
on:
  push:
    branches:
      - main
 
jobs:
  webapp_integration_tests:
    name: Run webapp integration tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: ${{ secrets.DATABASE_NAME }}
          POSTGRES_USER: ${{ secrets.DATABASE_USER }}
          POSTGRES_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python3 -m venv venv
        source venv/bin/activate
        pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run migrations
      run: |
        source venv/bin/activate
        python3 manage.py makemigrations
        python3 manage.py migrate
      env:
          DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
          DATABASE_USER: ${{ secrets.DATABASE_USER }}
          DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
          DATABASE_HOST: ${{ secrets.DATABASE_HOST }}
          DATABASE_PORT: ${{ secrets.DATABASE_PORT }}

    - name: Run tests
      run: |
        source venv/bin/activate
        python3 manage.py test
      env:
          DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
          DATABASE_USER: ${{ secrets.DATABASE_USER }}
          DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
          DATABASE_HOST: ${{ secrets.DATABASE_HOST }}
          DATABASE_PORT: ${{ secrets.DATABASE_PORT }}
 
  build-image:
    name: Build custom AMI with Packer
    runs-on: ubuntu-latest
    needs: webapp_integration_tests
 
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
 
      - name: Zip repository code
        run: |
          zip -r webapp.zip .
 
      - name: Setup AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Run packer
        id: packer
        run: |
          cd packer
          packer init image.pkr.hcl
          packer build -machine-readable image.pkr.hcl | tee packer.log
          AMI_ID=$(awk -F, '/artifact,0,id/ {print $6}' packer.log | cut -d: -f2)
          if [ -n "$AMI_ID" ]; then
            echo "New AMI created: $AMI_ID"
            echo "ami_id=$AMI_ID" >> $GITHUB_OUTPUT
            echo "AMI_CREATED=true" >> $GITHUB_OUTPUT
            echo "AMI_ID=$AMI_ID" >> $GITHUB_ENV
          else
            echo "No new AMI was created"
            echo "AMI_CREATED=false" >> $GITHUB_OUTPUT
          fi

      - name: Share AMI with Demo Account
        if: steps.packer.outputs.AMI_CREATED == 'true'
        run: |
          aws ec2 modify-image-attribute \
            --image-id ${{ steps.packer.outputs.ami_id }} \
            --launch-permission '{"Add":[{"UserId":"${{ secrets.DEMO_ACCOUNT_ID }}"}]}'

      - name: Get the Environment
        id: fetch-environment-vars
        run: |
          echo "IS_DEV_ENVIRONMENT=${{ vars.isDevEnvironment }}" >> $GITHUB_ENV
          echo "IS_DEMO_ENVIRONMENT=${{ vars.isDemoEnvironment }}" >> $GITHUB_ENV

      - name: Set the Environment
        id: determine-environment
        run: |
          if [ "${{ env.IS_DEV_ENVIRONMENT }}" == "true" ] && [ "${{ env.IS_DEMO_ENVIRONMENT }}" == "true" ]; then
            echo "ENVIRONMENTS=dev,demo" >> $GITHUB_ENV
          elif [ "${{ env.IS_DEV_ENVIRONMENT }}" == "true" ]; then
            echo "ENVIRONMENTS=dev" >> $GITHUB_ENV
          elif [ "${{ env.IS_DEMO_ENVIRONMENT }}" == "true" ]; then
            echo "ENVIRONMENTS=demo" >> $GITHUB_ENV
          else
            echo "Error: No environment provided" >&2
            exit 1
          fi

      - name: Configure DEV account AWS credentials
        if: contains(env.ENVIRONMENTS, 'dev')
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Process dev environment
        if: ${{ env.ENVIRONMENTS == 'dev' || env.ENVIRONMENTS == 'dev,demo' }}
        run: |
          echo "currently running in Dev Environment..."
          # Add Dev-specific commands here
          # aws ec2 modify-image-attribute --image-id ${{ env.AMI_ID }} --launch-permission "{\"Add\":[{\"UserId\":\"${{ secrets.DEV_ACCOUNT_ID }}\"]}"


          echo "Update Launch Template started..."
          #Update Launch Template
          aws ec2 create-launch-template-version \
            --launch-template-name "${{ secrets.LAUNCH_TEMPLATE_NAME }}" \
            --source-version "\$Latest" \
            --version-description "Updated with latest AMI ID" \
            --launch-template-data "{\"ImageId\": \"${{ env.AMI_ID }}\"}"
          echo "Updated launch template successfully..."

          echo "Modify Launch Template started..."
          aws ec2 modify-launch-template \
            --launch-template-name "${{ secrets.LAUNCH_TEMPLATE_NAME }}" \
            --default-version "\$Latest"
          echo "Launch template modified successfully..."

          #Start Instance Refresh
          REFRESH_ID=$(aws autoscaling start-instance-refresh \
            --auto-scaling-group-name "${{ secrets.AUTOSCALING_GROUP_NAME }}" \
            --preferences '{"MinHealthyPercentage": 50}' \
            --query 'InstanceRefreshId' \
            --output text)

          echo "REFRESH_ID=$REFRESH_ID" >> $GITHUB_ENV


          echo "Instance Refresh Started..."
          sleep 30

          while true; do
            STATUS=$(aws autoscaling describe-instance-refreshes \
              --auto-scaling-group-name "${{ secrets.AUTOSCALING_GROUP_NAME }}" \
              --query "InstanceRefreshes[0].Status" \
              --output text)
            echo "Current Status: $STATUS"
            if [ "$STATUS" == "Successful" ]; then
              echo "Instance Refresh Completed Successfully!"
              break
            elif [ "$STATUS" == "Failed" ]; then
              echo "Instance Refresh Failed."
              exit 1
            else
              echo "Instance Refresh In Progress... Checking again in 30 seconds."
              sleep 30
            fi
          done

      - name: Configure DEMO account AWS credentials
        if: ${{ env.ENVIRONMENTS == 'demo' || env.ENVIRONMENTS == 'dev,demo' }}
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.DEMO_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEMO_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Process demo environment
        if: contains(env.ENVIRONMENTS, 'demo')
        run: |
          echo "currently running in Demo Environment..."
          # Add Demo-specific commands here
          # aws ec2 modify-image-attribute --image-id ${{ env.AMI_ID }} --launch-permission "{\"Add\":[{\"UserId\":\"${{ secrets.DEMO_ACCOUNT_ID }}\"]}"

          echo "Update Launch Template started..."

          # Update Launch Template
          aws ec2 create-launch-template-version \
            --launch-template-name "${{ secrets.LAUNCH_TEMPLATE_NAME }}" \
            --source-version "\$Latest" \
            --version-description "Updated with latest AMI ID" \
            --launch-template-data "{\"ImageId\": \"${{ env.AMI_ID }}\"}"
          echo "Updated launch template successfully..."

          echo "Modify Launch Template started..."
          aws ec2 modify-launch-template \
            --launch-template-name "${{ secrets.LAUNCH_TEMPLATE_NAME }}" \
            --default-version "\$Latest"
          echo "Launch template modified successfully..."

          # Start Instance Refresh
          REFRESH_ID=$(aws autoscaling start-instance-refresh \
            --auto-scaling-group-name "${{ secrets.AUTOSCALING_GROUP_NAME }}" \
            --preferences '{"MinHealthyPercentage": 50}' \
            --query 'InstanceRefreshId' \
            --output text)

          echo "REFRESH_ID=$REFRESH_ID" >> $GITHUB_ENV

          echo "Instance Refresh Started..."
          sleep 30

          while true; do
            STATUS=$(aws autoscaling describe-instance-refreshes \
              --auto-scaling-group-name "${{ secrets.AUTOSCALING_GROUP_NAME }}" \
              --query "InstanceRefreshes[0].Status" \
              --output text)
            echo "Current Status: $STATUS"
            if [ "$STATUS" == "Successful" ]; then
              echo "Instance Refresh Completed Successfully!"
              break
            elif [ "$STATUS" == "Failed" ]; then
              echo "Instance Refresh Failed."
              exit 1
            else
              echo "Instance Refresh In Progress... Checking again in 30 seconds."
              sleep 30
            fi
          done

      - name: Skip Infra Updates
        run: |
          echo "No launch template found. Skipping infrastructure update."
            
